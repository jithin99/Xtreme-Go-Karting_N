
import React from 'react'
import { api as axios } from '../lib/api'
function currency(n){ return `₹${n.toLocaleString('en-IN')}` }
export default function Booking(){
  const [user,setUser]=React.useState(JSON.parse(localStorage.getItem('user')||'null'))
  const [products,setProducts]=React.useState([]); const [date,setDate]=React.useState(''); const [productId,setProductId]=React.useState('super'); const [variantId,setVariantId]=React.useState('super-5'); const [qty,setQty]=React.useState(1); const [slots,setSlots]=React.useState([]); const [time,setTime]=React.useState(''); const [gopro,setGopro]=React.useState(false); const [items,setItems]=React.useState([]); const [confirmation,setConfirmation]=React.useState(null)
  React.useEffect(()=>{ axios.get('/api/products').then(r=>{ setProducts(r.data); setVariantId(r.data.find(p=>p.id==='super').variants[0].id) }) },[])
  const search=async()=>{ if(!date) return alert('Pick date'); const {data}=await axios.get('/api/availability',{params:{productId,variantId,date,qty}}); setSlots(data.slots); setTime('') }
  const addToCart=()=>{ const p=products.find(p=>p.id===productId); const v=p?.variants.find(v=>v.id===variantId); setItems(prev=>[...prev,{productId,variantId,qty,gopro,title:p?.name,variant:v?.name,price:v?.price}]) }
  const remove=(i)=> setItems(x=> x.filter((_,idx)=> idx!==i))
  const checkout=async()=>{ if(!user){ location.hash='auth'; return } if(!time) return alert('Select a time from availability'); const startTime = `${date} ${time}`; const {data}=await axios.post('/api/bookings',{customer:{name:user.name||'Guest',phone:user.phone||''},items,startTime}); setConfirmation(data.booking); setItems([]) }
  const subtotal = items.reduce((s,x)=> s + (x.price*x.qty) + (x.gopro?200*x.qty:0), 0)
  return (<section id='book' className='max-w-7xl mx-auto px-4 py-12 md:py-16'><h2 className='text-2xl md:text-3xl font-bold mb-6'>Book Your Session</h2><div className='mb-4'>{!user && (<div className='text-sm text-zinc-700'>Please <a href='#auth' className='underline'>sign in</a> to book.</div>)}</div><div className='grid md:grid-cols-2 gap-6'><div className='card p-4'><div className='grid md:grid-cols-2 gap-4'><div className='flex flex-col'><label className='text-xs mb-1'>Date</label><input type='date' value={date} onChange={e=>setDate(e.target.value)} className='border rounded-xl px-3 py-2'/></div><div className='flex flex-col'><label className='text-xs mb-1'>Quantity</label><input type='number' min={1} value={qty} onChange={e=>setQty(parseInt(e.target.value||'1'))} className='border rounded-xl px-3 py-2'/></div><div className='flex flex-col'><label className='text-xs mb-1'>Product</label><select value={productId} onChange={e=>{ setProductId(e.target.value); const p=products.find(x=>x.id===e.target.value); if(p) setVariantId(p.variants[0].id) }} className='border rounded-xl px-3 py-2'>{products.filter(p=>p.type!=='AddOn').map(p=> <option key={p.id} value={p.id}>{p.name}</option>)}</select></div><div className='flex flex-col'><label className='text-xs mb-1'>Variant</label><select value={variantId} onChange={e=>setVariantId(e.target.value)} className='border rounded-xl px-3 py-2'>{products.find(p=>p.id===productId)?.variants.map(v=> <option key={v.id} value={v.id}>{v.name}</option>)}</select></div></div><div className='mt-3 flex items-center gap-2'>{products.find(p=>p.id===productId)?.type==='Kart' && (<><input type='checkbox' checked={gopro} onChange={e=>setGopro(e.target.checked)}/><span className='text-sm'>Add Go-Pro (₹200)</span></>)}</div><div className='mt-3 flex gap-2'><button className='btn border' onClick={search}>Search Slots</button><button className='btn btn-primary' onClick={addToCart} disabled={!user}>Add to Cart</button></div><div className='mt-4'><div className='text-sm font-semibold mb-1'>Available Times:</div><div className='flex flex-wrap gap-2'>{slots.map(s=> <button key={s} onClick={()=>setTime(s)} className={'px-3 py-1 rounded border '+(time===s?'bg-black text-white':'')}>{s}</button>)}</div></div></div><div className='card p-4'>{items.length===0? (<div className='text-sm text-zinc-600 text-center'>Your cart is empty.</div>):(<div className='divide-y'>{items.map((it,i)=>(<div key={i} className='py-3 flex items-start justify-between gap-3'><div><div className='font-medium'>{it.title} — {it.variant}</div><div className='text-xs text-zinc-600'>{it.qty}× {it.gopro?'• Go-Pro':''}</div></div><div className='flex items-center gap-3'><div className='font-semibold'>{currency((it.price*it.qty)+(it.gopro?200*it.qty:0))}</div><button className='text-xs px-2 py-1 rounded border' onClick={()=>remove(i)}>Remove</button></div></div>))}<div className='pt-3 text-sm flex flex-col items-end gap-1'><div>Subtotal: <span className='font-semibold'>{currency(subtotal)}</span></div><div className='text-xs text-zinc-600'>GST added at confirmation</div><button className='mt-2 btn btn-primary' onClick={checkout} disabled={!time || !user}>Confirm ({time||'select time'})</button></div></div>)}</div></div>{confirmation && (<div className='mt-6 card p-6 bg-green-50 border-green-200'><h3 className='text-xl font-bold'>Booking Confirmed</h3><div className='text-2xl font-mono tracking-widest'>{confirmation.code}</div><div className='text-sm'>Amount: {currency(confirmation.total)}</div><a className='underline text-sm' href='#account'>View in My Bookings →</a></div>)}</section>)
}
